from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, CallbackQueryHandler, ConversationHandler
from libs.keyboards import get_confirmation_keyboard, get_main_menu
from libs.logger import get_logger

logger = get_logger(__name__)

async def start_route(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"User {user.id} starting new route")
    
    try:
        route_info = """üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: –ê123–ë–í777
üü¢ –°—Ç–∞—Ç—É—Å: –ò—Å–ø—Ä–∞–≤–µ–Ω
‚õΩ –¢–æ–ø–ª–∏–≤–æ: ~45 –ª–∏—Ç—Ä–æ–≤
üìä –û–¥–æ–º–µ—Ç—Ä: 125 643 –∫–º
‚ùó –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –ü—Ä–∞–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç–Ω–∏–∫ –º–∏–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ

üìç –¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:
1. –°–∫–ª–∞–¥ ‚Ññ1 (—É–ª. –õ–µ–Ω–∏–Ω–∞, 10) - –∑–∞–≥—Ä—É–∑–∫–∞
2. –ú–∞–≥–∞–∑–∏–Ω "–ü—Ä–æ–¥—É–∫—Ç—ã" (—É–ª. –ú–∏—Ä–∞, 5) - –≤—ã–≥—Ä—É–∑–∫–∞
3. –¢–¶ "–ú–µ–≥–∞" (—à. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ, 15) - –≤—ã–≥—Ä—É–∑–∫–∞"""
        
        context.user_data['route'] = {
            'vehicle_info': route_info,
            'checkpoints': [
                {'id': 1, 'name': '–°–∫–ª–∞–¥ ‚Ññ1', 'address': '—É–ª. –õ–µ–Ω–∏–Ω–∞, 10', 'type': '–∑–∞–≥—Ä—É–∑–∫–∞', 'completed': False},
                {'id': 2, 'name': '–ú–∞–≥–∞–∑–∏–Ω "–ü—Ä–æ–¥—É–∫—Ç—ã"', 'address': '—É–ª. –ú–∏—Ä–∞, 5', 'type': '–≤—ã–≥—Ä—É–∑–∫–∞', 'completed': False},
                {'id': 3, 'name': '–¢–¶ "–ú–µ–≥–∞"', 'address': '—à. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ, 15', 'type': '–≤—ã–≥—Ä—É–∑–∫–∞', 'completed': False}
            ],
            'current_checkpoint': None
        }
        
        logger.debug(f"Route data for user {user.id}: {context.user_data['route']}")
        
        await update.message.reply_text(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ:\n{route_info}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
            reply_markup=get_confirmation_keyboard()
        )
        return 1
    except Exception as e:
        logger.error(f"Start route error for user {user.id}: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

async def process_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    choice = update.message.text
    
    if choice == '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ':
        logger.info(f"User {user.id} confirmed route")
        await update.message.reply_text(
            "–ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç)",
            reply_markup=get_main_menu()
        )
        await send_checkpoints(update, context)
        return 2
    else:
        logger.info(f"User {user.id} reported route issues")
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–∞—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

async def send_checkpoints(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    checkpoints = context.user_data['route']['checkpoints']
    
    keyboard = []
    for point in checkpoints:
        status = "‚úÖ" if point['completed'] else "üîò"
        button = InlineKeyboardButton(
            f"{status} {point['name']} ({point['type']})",
            callback_data=f"checkpoint_{point['id']}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="finish")])
    
    await update.message.reply_text(
        "–û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_checkpoint(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    checkpoint_id = int(query.data.split('_')[1])
    
    logger.info(f"User {user.id} toggled checkpoint {checkpoint_id}")
    
    for point in context.user_data['route']['checkpoints']:
        if point['id'] == checkpoint_id:
            point['completed'] = not point['completed']
            break
    
    await send_checkpoints(update, context)
    return 2

async def finish_route(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"User {user.id} finishing route")
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        "1. –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ (–ª)\n"
        "2. –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ (–∫–º)\n\n"
        "–§–æ—Ä–º–∞—Ç: <—Ç–æ–ø–ª–∏–≤–æ>, <–æ–¥–æ–º–µ—Ç—Ä>\n"
        "–ü—Ä–∏–º–µ—Ä: 42, 125700",
        reply_markup=ReplyKeyboardRemove()
    )
    return 3

async def save_final_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    try:
        fuel, odometer = map(str.strip, update.message.text.split(','))
        logger.info(f"User {user.id} submitted final data: fuel={fuel}, odometer={odometer}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        await update.message.reply_text(
            f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n‚õΩ –¢–æ–ø–ª–∏–≤–æ: {fuel} –ª\nüìä –û–¥–æ–º–µ—Ç—Ä: {odometer} –∫–º\n\n"
            "–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Invalid final data from user {user.id}: {update.message.text}. Error: {e}")
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Ç–æ–ø–ª–∏–≤–æ>, <–æ–¥–æ–º–µ—Ç—Ä>"
        )
        return 3