from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, CallbackQueryHandler, ConversationHandler
from libs.keyboards import get_confirmation_keyboard, get_main_menu, get_reason_keyboard, get_checkpoints_keyboard
from libs.logger import get_logger

logger = get_logger(__name__)
async def start_route(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    logger.info(f"User {user.id} starting new route")
    
    try:
        route_info = """üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: –ê123–ë–í777
üü¢ –°—Ç–∞—Ç—É—Å: –ò—Å–ø—Ä–∞–≤–µ–Ω
‚õΩ –¢–æ–ø–ª–∏–≤–æ: ~45 –ª–∏—Ç—Ä–æ–≤
üìä –û–¥–æ–º–µ—Ç—Ä: 125 643 –∫–º
‚ùó –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: –ü—Ä–∞–≤—ã–π –ø–æ–≤–æ—Ä–æ—Ç–Ω–∏–∫ –º–∏–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ

üìç –¢–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞:
1. –°–∫–ª–∞–¥ ‚Ññ1 (—É–ª. –õ–µ–Ω–∏–Ω–∞, 10) - –∑–∞–≥—Ä—É–∑–∫–∞
2. –ú–∞–≥–∞–∑–∏–Ω "–ü—Ä–æ–¥—É–∫—Ç—ã" (—É–ª. –ú–∏—Ä–∞, 5) - –≤—ã–≥—Ä—É–∑–∫–∞
3. –¢–¶ "–ú–µ–≥–∞" (—à. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ, 15) - –≤—ã–≥—Ä—É–∑–∫–∞"""
        
        context.user_data['route'] = {
            'vehicle_info': route_info,
            'checkpoints': [
                {'id': 1, 'name': '–°–∫–ª–∞–¥ ‚Ññ1', 'address': '—É–ª. –õ–µ–Ω–∏–Ω–∞, 10', 'type': '–∑–∞–≥—Ä—É–∑–∫–∞', 'completed': False},
                {'id': 2, 'name': '–ú–∞–≥–∞–∑–∏–Ω "–ü—Ä–æ–¥—É–∫—Ç—ã"', 'address': '—É–ª. –ú–∏—Ä–∞, 5', 'type': '–≤—ã–≥—Ä—É–∑–∫–∞', 'completed': False},
                {'id': 3, 'name': '–¢–¶ "–ú–µ–≥–∞"', 'address': '—à. –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ, 15', 'type': '–≤—ã–≥—Ä—É–∑–∫–∞', 'completed': False}
            ],
            'current_checkpoint': None
        }
        
        await update.message.reply_text(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ:\n{route_info}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?",
            reply_markup=get_confirmation_keyboard()
        )
        return 1  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    except Exception as e:
        logger.error(f"Start route error for user {user.id}: {e}")
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

async def process_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    choice = update.message.text
    
    if choice == '‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ':
        logger.info(f"User {user.id} confirmed route")
        await update.message.reply_text(
            "–ü—É—Ç–µ–≤–æ–π –ª–∏—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω! (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç)",
            reply_markup=get_main_menu()
        )
        await send_checkpoints(update, context)
        return 2
    else:
        logger.info(f"User {user.id} reported route issues")
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± –æ—à–∏–±–∫–∞—Ö –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END


async def send_checkpoints(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫"""
    checkpoints = context.user_data['route']['checkpoints']
    
    keyboard = []
    for point in checkpoints:
        status = "‚úÖ" if point['completed'] else "üîò"
        button = InlineKeyboardButton(
            f"{status} {point['name']} ({point['type']})",
            callback_data=f"checkpoint_{point['id']}"
        )
        keyboard.append([button])
    
    keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="finish")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è CallbackQuery
        await update.callback_query.edit_message_text(
            text="–û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:",
            reply_markup=reply_markup
        )
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ Message
        await update.message.reply_text(
            text="–û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏:",
            reply_markup=reply_markup
        )

async def handle_checkpoint(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    checkpoint_id = int(query.data.split('_')[1])
    
    logger.info(f"User {user.id} toggled checkpoint {checkpoint_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ—á–∫–∏
    for point in context.user_data['route']['checkpoints']:
        if point['id'] == checkpoint_id:
            point['completed'] = not point['completed']
            break
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await send_checkpoints(update, context)
    return 2

async def finish_route(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤"""
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat_id
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=query.message.message_id,
            text="–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞..."
        )
    else:
        chat_id = update.message.chat_id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    current_unfinished = [p for p in context.user_data['route']['checkpoints'] if not p['completed']]
    
    if current_unfinished:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤ user_data
        context.user_data['unfinished_points'] = current_unfinished
        points_list = "\n".join(f"{p['id']}. {p['name']}" for p in current_unfinished)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã:\n{points_list}\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_reason_keyboard()
        )
        return 4
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤, —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await request_final_data(context, chat_id)
        return 3

async def handle_unfinished_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    user = update.effective_user
    chat_id = update.message.chat_id
    user_choice = update.message.text

    # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
    current_unfinished = [p for p in context.user_data['route']['checkpoints'] if not p['completed']]
    
    if not current_unfinished:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–º–µ—Ç–∏–ª –≤—Å–µ –ø—É–Ω–∫—Ç—ã
        await update.message.reply_text(
            "–í—Å–µ –ø—É–Ω–∫—Ç—ã —Ç–µ–ø–µ—Ä—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞...",
            reply_markup=ReplyKeyboardRemove()
        )
        await request_final_data(context, chat_id)
        return 3

    if user_choice == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å':
        logger.info(f"User {user.id} skipped reason for unfinished points")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        context.user_data['unfinished_points'] = current_unfinished
        await update.message.reply_text(
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –º–∞—Ä—à—Ä—É—Ç–∞...",
            reply_markup=ReplyKeyboardRemove()
        )
        await request_final_data(context, chat_id)
        return 3
        
    elif user_choice == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ':
        logger.info(f"User {user.id} canceled route finishing")
        await update.message.reply_text(
            "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É.",
            reply_markup=get_checkpoints_keyboard(context.user_data['route']['checkpoints'])
        )
        return 2
        
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã
        reason = user_choice
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        for point in current_unfinished:
            point['reason'] = reason
        
        logger.info(f"User {user.id} provided reason: {reason}")
        context.user_data['unfinished_points'] = current_unfinished
        await update.message.reply_text(
            f"–ü—Ä–∏—á–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {reason}",
            reply_markup=ReplyKeyboardRemove()
        )
        await request_final_data(context, chat_id)
        return 3

async def save_final_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user = update.effective_user
    try:
        fuel, odometer = map(str.strip, update.message.text.split(','))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n‚õΩ –¢–æ–ø–ª–∏–≤–æ: {fuel} –ª\nüìä –û–¥–æ–º–µ—Ç—Ä: {odometer} –∫–º"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        current_unfinished = [p for p in context.user_data['route']['checkpoints'] if not p['completed']]
        
        if current_unfinished:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –∏–∑ user_data –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            unfinished_with_reasons = []
            for p in current_unfinished:
                reason = p.get('reason', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
                unfinished_with_reasons.append(f"‚ùå {p['name']} (–ø—Ä–∏—á–∏–Ω–∞: {reason})")
            
            report += f"\n\n–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã:\n" + "\n".join(unfinished_with_reasons)
        
        await update.message.reply_text(
            report + "\n\n–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_main_menu()
        )
        
        logger.info(f"User {user.id} finished route. Fuel: {fuel}, Odometer: {odometer}. "
                   f"Unfinished: {len(current_unfinished)}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Invalid final data from user {user.id}: {update.message.text}. Error: {e}")
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Ç–æ–ø–ª–∏–≤–æ>, <–æ–¥–æ–º–µ—Ç—Ä>"
        )
        return 3
    
async def request_final_data(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await context.bot.send_message(
        chat_id=chat_id,
        text="–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
             "1. –£—Ä–æ–≤–µ–Ω—å —Ç–æ–ø–ª–∏–≤–∞ (–ª)\n"
             "2. –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ (–∫–º)\n\n"
             "–§–æ—Ä–º–∞—Ç: <—Ç–æ–ø–ª–∏–≤–æ>, <–æ–¥–æ–º–µ—Ç—Ä>\n"
             "–ü—Ä–∏–º–µ—Ä: 42, 125700",
        reply_markup=get_main_menu()
    )